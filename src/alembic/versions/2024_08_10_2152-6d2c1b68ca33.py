"""empty message

Revision ID: 6d2c1b68ca33
Revises: 
Create Date: 2024-08-10 21:52:37.232317

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6d2c1b68ca33'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('area',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('icon',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('image', sa.LargeBinary(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('job',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('monster',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('earth_resistance', sa.Integer(), nullable=False),
    sa.Column('air_resistance', sa.Integer(), nullable=False),
    sa.Column('fire_resistance', sa.Integer(), nullable=False),
    sa.Column('water_resistance', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('range_wait',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('start', sa.Float(), nullable=False),
    sa.Column('end', sa.Float(), nullable=False),
    sa.CheckConstraint('"end" > start', name='check_end_greater_than_start'),
    sa.CheckConstraint('start >= 0', name='positive start'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('region',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('left', sa.Integer(), nullable=False),
    sa.Column('right', sa.Integer(), nullable=False),
    sa.Column('top', sa.Integer(), nullable=False),
    sa.Column('bot', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('left', 'right', 'top', 'bot', name='unique region')
    )
    op.create_table('server',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('stat',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.CheckConstraint('weight>0', name='check positive weight'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('template_found',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('type_item',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('category', sa.Enum('ALL', 'EQUIPMENT', 'CONSUMABLES', 'RESOURCES', 'QUEST', 'OTHER', 'COSMETICS', 'ECAFLIP_CARD', name='categoryenum'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('sub_expire', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('world',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('character',
    sa.Column('id', sa.String(), autoincrement=False, nullable=False),
    sa.Column('lvl', sa.Integer(), nullable=False),
    sa.Column('po_bonus', sa.Integer(), nullable=False),
    sa.Column('elem', sa.Enum('ELEMENT_NEUTRAL', 'ELEMENT_EARTH', 'ELEMENT_FIRE', 'ELEMENT_WATER', 'ELEMENT_AIR', name='elemenum'), nullable=False),
    sa.Column('server_id', sa.Integer(), nullable=False),
    sa.CheckConstraint('lvl>=1 AND lvl<=200', name='check legit character lvl'),
    sa.CheckConstraint('po_bonus>=0', name='check positive po bonus'),
    sa.ForeignKeyConstraint(['server_id'], ['server.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('config_user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('afk_time_at_start', sa.Time(), nullable=True),
    sa.Column('time_between_sentence', sa.Time(), nullable=True),
    sa.Column('time_fighter', sa.Time(), nullable=True),
    sa.Column('time_harvester', sa.Time(), nullable=True),
    sa.Column('randomizer_duration_activity', sa.Float(), nullable=False),
    sa.Column('range_new_map_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.CheckConstraint('randomizer_duration_activity >= 0 and randomizer_duration_activity <= 1', name='coherent randomizer_duration_activity'),
    sa.ForeignKeyConstraint(['range_new_map_id'], ['range_wait.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('equipment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('exo_stat_id', sa.Integer(), nullable=True),
    sa.Column('count_lines_achieved', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['exo_stat_id'], ['stat.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('label', 'user_id', name='unique label for user')
    )
    op.create_table('item',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type_item_id', sa.Integer(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('weight', sa.Integer(), nullable=False),
    sa.Column('icon_id', sa.Integer(), nullable=True),
    sa.Column('is_saleable', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['icon_id'], ['icon.id'], ),
    sa.ForeignKeyConstraint(['type_item_id'], ['type_item.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sub_area',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('area_id', sa.Integer(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'area_id', name='unique sub area in area')
    )
    op.create_table('character_items_association',
    sa.Column('character_id', sa.String(), nullable=True),
    sa.Column('item_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['character_id'], ['character.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['item_id'], ['item.id'], )
    )
    op.create_table('character_job_info',
    sa.Column('character_id', sa.String(), nullable=False),
    sa.Column('job_id', sa.Integer(), nullable=False),
    sa.Column('lvl', sa.Integer(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.CheckConstraint('lvl>=1 AND lvl<=200', name='check legit character job lvl'),
    sa.ForeignKeyConstraint(['character_id'], ['character.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['job_id'], ['job.id'], ),
    sa.PrimaryKeyConstraint('character_id', 'job_id')
    )
    op.create_table('character_sell_item_info',
    sa.Column('character_id', sa.String(), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('sale_hotel_quantities', postgresql.ARRAY(sa.Enum('ONE', 'TEN', 'HUNDRED', name='salehotelquantity')), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['character.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['item_id'], ['item.id'], ),
    sa.PrimaryKeyConstraint('character_id', 'item_id')
    )
    op.create_table('character_sub_areas_association',
    sa.Column('character_id', sa.String(), nullable=True),
    sa.Column('sub_area_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['character_id'], ['character.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sub_area_id'], ['sub_area.id'], )
    )
    op.create_table('collectable',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('job_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['item.id'], ),
    sa.ForeignKeyConstraint(['job_id'], ['job.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('item_id')
    )
    op.create_table('drop',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('monster_id', sa.Integer(), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('percentage', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['item.id'], ),
    sa.ForeignKeyConstraint(['monster_id'], ['monster.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('monster_id', 'item_id', name='unique drop')
    )
    op.create_table('line',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Integer(), nullable=False),
    sa.Column('equipment_id', sa.Integer(), nullable=False),
    sa.Column('stat_id', sa.Integer(), nullable=False),
    sa.Column('spent_quantity', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['equipment_id'], ['equipment.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['stat_id'], ['stat.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stat_id', 'equipment_id', name='unique stat for equipment')
    )
    op.create_table('map',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('x', sa.Integer(), nullable=False),
    sa.Column('y', sa.Integer(), nullable=False),
    sa.Column('world_id', sa.Integer(), nullable=False),
    sa.Column('sub_area_id', sa.Integer(), nullable=False),
    sa.Column('left_map_id', sa.Integer(), nullable=True),
    sa.Column('right_map_id', sa.Integer(), nullable=True),
    sa.Column('top_map_id', sa.Integer(), nullable=True),
    sa.Column('bot_map_id', sa.Integer(), nullable=True),
    sa.Column('can_havre_sac', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['bot_map_id'], ['map.id'], ),
    sa.ForeignKeyConstraint(['left_map_id'], ['map.id'], ),
    sa.ForeignKeyConstraint(['right_map_id'], ['map.id'], ),
    sa.ForeignKeyConstraint(['sub_area_id'], ['sub_area.id'], ),
    sa.ForeignKeyConstraint(['top_map_id'], ['map.id'], ),
    sa.ForeignKeyConstraint(['world_id'], ['world.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('monster_sub_area_association',
    sa.Column('sub_area_id', sa.Integer(), nullable=True),
    sa.Column('monster_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['monster_id'], ['monster.id'], ),
    sa.ForeignKeyConstraint(['sub_area_id'], ['sub_area.id'], )
    )
    op.create_table('price',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('server_id', sa.Integer(), nullable=False),
    sa.Column('average', sa.Float(), nullable=False),
    sa.CheckConstraint('average>=0', name='check positive price'),
    sa.ForeignKeyConstraint(['item_id'], ['item.id'], ),
    sa.ForeignKeyConstraint(['server_id'], ['server.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('item_id', 'server_id', name='unique price by server item')
    )
    op.create_table('range_hour_play_time',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('config_user_id', sa.Integer(), nullable=False),
    sa.CheckConstraint('end_time > start_time', name='check_end_time_greater_than_start_time'),
    sa.ForeignKeyConstraint(['config_user_id'], ['config_user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('recipe',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('result_item_id', sa.Integer(), nullable=False),
    sa.Column('job_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['job.id'], ),
    sa.ForeignKeyConstraint(['result_item_id'], ['item.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('result_item_id')
    )
    op.create_table('rune',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('stat_id', sa.Integer(), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('stat_quantity', sa.Integer(), nullable=False),
    sa.CheckConstraint('stat_quantity>0', name='check positive quantity'),
    sa.ForeignKeyConstraint(['item_id'], ['item.id'], ),
    sa.ForeignKeyConstraint(['stat_id'], ['stat.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'stat_quantity', name='unique name with quantity')
    )
    op.create_table('spell',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('character_id', sa.String(), nullable=False),
    sa.Column('index', sa.Integer(), nullable=False),
    sa.Column('elem', sa.Enum('ELEMENT_NEUTRAL', 'ELEMENT_EARTH', 'ELEMENT_FIRE', 'ELEMENT_WATER', 'ELEMENT_AIR', name='elemenum'), nullable=False),
    sa.Column('is_disenchantment', sa.Boolean(), nullable=False),
    sa.Column('boost_char', sa.Enum('PA', 'PM', 'PO', 'CHANCE', 'VITALITY', name='characteristicenum'), nullable=True),
    sa.Column('is_healing', sa.Boolean(), nullable=False),
    sa.Column('is_for_enemy', sa.Boolean(), nullable=False),
    sa.Column('ap_cost', sa.Integer(), nullable=False),
    sa.Column('max_cast', sa.Integer(), nullable=False),
    sa.Column('min_range', sa.Integer(), nullable=False),
    sa.Column('range', sa.Integer(), nullable=False),
    sa.Column('duration_boost', sa.Integer(), nullable=False),
    sa.Column('boostable_range', sa.Boolean(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.CheckConstraint('level>=1 AND level<=200', name='check legit spell lvl'),
    sa.ForeignKeyConstraint(['character_id'], ['character.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('character_id', 'index', name='unique index per character'),
    sa.UniqueConstraint('name')
    )
    op.create_table('character_recipe_association',
    sa.Column('character_id', sa.String(), nullable=True),
    sa.Column('recipe_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['character_id'], ['character.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], )
    )
    op.create_table('collectable_map_info',
    sa.Column('collectable_id', sa.Integer(), nullable=False),
    sa.Column('map_id', sa.Integer(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['collectable_id'], ['collectable.id'], ),
    sa.ForeignKeyConstraint(['map_id'], ['map.id'], ),
    sa.PrimaryKeyConstraint('collectable_id', 'map_id')
    )
    op.create_table('ingredient',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['item.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('item_id', 'recipe_id', name='unique ingredient on recipe')
    )
    op.create_table('template_found_map',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('map_id', sa.Integer(), nullable=True),
    sa.Column('template_found_id', sa.Integer(), nullable=False),
    sa.Column('parsed_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['map_id'], ['map.id'], ),
    sa.ForeignKeyConstraint(['template_found_id'], ['template_found.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('map_id', 'template_found_id', name='unique template map found')
    )
    op.create_table('waypoint',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('map_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['map_id'], ['map.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('map_id')
    )
    op.create_table('character_waypoint_association',
    sa.Column('character_id', sa.String(), nullable=True),
    sa.Column('waypoint_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['character_id'], ['character.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['waypoint_id'], ['waypoint.id'], )
    )
    op.create_table('template_found_placement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('template_found_map_id', sa.Integer(), nullable=False),
    sa.Column('region_id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['region_id'], ['region.id'], ),
    sa.ForeignKeyConstraint(['template_found_map_id'], ['template_found_map.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('template_found_map_id', 'region_id', name='unique template found place')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('template_found_placement')
    op.drop_table('character_waypoint_association')
    op.drop_table('waypoint')
    op.drop_table('template_found_map')
    op.drop_table('ingredient')
    op.drop_table('collectable_map_info')
    op.drop_table('character_recipe_association')
    op.drop_table('spell')
    op.drop_table('rune')
    op.drop_table('recipe')
    op.drop_table('range_hour_play_time')
    op.drop_table('price')
    op.drop_table('monster_sub_area_association')
    op.drop_table('map')
    op.drop_table('line')
    op.drop_table('drop')
    op.drop_table('collectable')
    op.drop_table('character_sub_areas_association')
    op.drop_table('character_sell_item_info')
    op.drop_table('character_job_info')
    op.drop_table('character_items_association')
    op.drop_table('sub_area')
    op.drop_table('item')
    op.drop_table('equipment')
    op.drop_table('config_user')
    op.drop_table('character')
    op.drop_table('world')
    op.drop_table('user')
    op.drop_table('type_item')
    op.drop_table('template_found')
    op.drop_table('stat')
    op.drop_table('server')
    op.drop_table('region')
    op.drop_table('range_wait')
    op.drop_table('monster')
    op.drop_table('job')
    op.drop_table('icon')
    op.drop_table('area')
    # ### end Alembic commands ###
