"""empty message

Revision ID: e70db6b887cf
Revises: 66b8576bcba9
Create Date: 2024-07-11 15:09:14.381068

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "e70db6b887cf"
down_revision: Union[str, None] = "66b8576bcba9"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("spell_level_effect")
    op.drop_table("effect")
    op.drop_table("characteristic")
    op.drop_table("characteristic_category")

    with op.batch_alter_table("character", schema=None) as batch_op:
        batch_op.drop_constraint("character_breed_id_fkey", type_="foreignkey")
        batch_op.drop_column("breed_id")

    op.drop_table("spell_level")

    op.execute("DELETE FROM spell")

    characteristicenum = sa.Enum(
        "PA", "PM", "PO", "CHANCE", "VITALITY", name="characteristicenum"
    )
    characteristicenum.create(op.get_bind())

    with op.batch_alter_table("spell", schema=None) as batch_op:
        batch_op.add_column(sa.Column("character_id", sa.String(), nullable=False))
        batch_op.add_column(sa.Column("index", sa.Integer(), nullable=False))
        batch_op.add_column(
            sa.Column(
                "elem",
                sa.Enum(
                    "ELEMENT_NEUTRAL",
                    "ELEMENT_EARTH",
                    "ELEMENT_FIRE",
                    "ELEMENT_WATER",
                    "ELEMENT_AIR",
                    name="elemenum",
                ),
                nullable=False,
            )
        )
        batch_op.add_column(
            sa.Column("is_disenchantment", sa.Boolean(), nullable=False)
        )
        batch_op.add_column(
            sa.Column(
                "boost_char",
                sa.Enum(
                    "PA", "PM", "PO", "CHANCE", "VITALITY", name="characteristicenum"
                ),
                nullable=True,
            )
        )
        batch_op.add_column(sa.Column("is_healing", sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column("is_for_enemy", sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column("ap_cost", sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column("max_cast", sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column("min_range", sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column("range", sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column("duration_boost", sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column("boostable_range", sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column("level", sa.Integer(), nullable=False))
        batch_op.create_unique_constraint(
            "unique index per character", ["character_id", "index"]
        )
        batch_op.drop_constraint("spell_spell_variant_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            None, "character", ["character_id"], ["id"], ondelete="CASCADE"
        )
        batch_op.drop_column("spell_variant_id")
        batch_op.drop_column("default_index")

    op.drop_table("spell_variant")
    op.drop_table("breed")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("spell", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "default_index", sa.INTEGER(), autoincrement=False, nullable=False
            )
        )
        batch_op.add_column(
            sa.Column(
                "spell_variant_id", sa.INTEGER(), autoincrement=False, nullable=False
            )
        )
        batch_op.drop_constraint(None, type_="foreignkey")
        batch_op.create_foreign_key(
            "spell_spell_variant_id_fkey", "spell_variant", ["spell_variant_id"], ["id"]
        )
        batch_op.drop_constraint("unique index per character", type_="unique")
        batch_op.drop_column("level")
        batch_op.drop_column("boostable_range")
        batch_op.drop_column("duration_boost")
        batch_op.drop_column("range")
        batch_op.drop_column("min_range")
        batch_op.drop_column("max_cast")
        batch_op.drop_column("ap_cost")
        batch_op.drop_column("is_for_enemy")
        batch_op.drop_column("is_healing")
        batch_op.drop_column("boost_char")
        batch_op.drop_column("is_disenchantment")
        batch_op.drop_column("elem")
        batch_op.drop_column("index")
        batch_op.drop_column("character_id")

    with op.batch_alter_table("character", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("breed_id", sa.INTEGER(), autoincrement=False, nullable=False)
        )
        batch_op.create_foreign_key(
            "character_breed_id_fkey", "breed", ["breed_id"], ["id"]
        )

    op.create_table(
        "breed",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="breed_pkey"),
        sa.UniqueConstraint("name", name="breed_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "spell_variant",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("breed_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["breed_id"], ["breed.id"], name="spell_variant_breed_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="spell_variant_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "spell_level_effect",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("spell_level_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("effect_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("duration", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "dispellable",
            postgresql.ENUM(
                "IS_DISPELLABLE",
                "IS_DISPELLABLE_ONLY_BY_DEATH",
                "IS_NOT_DISPELLABLE",
                name="dispellableenum",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["effect_id"], ["effect.id"], name="spell_level_effect_effect_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["spell_level_id"],
            ["spell_level.id"],
            name="spell_level_effect_spell_level_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="spell_level_effect_pkey"),
    )
    op.create_table(
        "characteristic",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "characteristic_category_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["characteristic_category_id"],
            ["characteristic_category.id"],
            name="characteristic_characteristic_category_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="characteristic_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "spell_level",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("spell_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("ap_cost", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("max_cast", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("min_range", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("range", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "can_cast_in_line", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "can_cast_in_diagonal", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column("need_los", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "is_disenchantment", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column("is_boost", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("is_healing", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("on_enemy", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("duration_boost", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("need_free_cell", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("need_taken_cell", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "need_visible_entity", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "range_can_be_boosted", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column("max_stack", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "min_cast_interval", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "initial_cooldown", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column("global_cooldown", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "min_player_level", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["spell_id"], ["spell.id"], name="spell_level_spell_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="spell_level_pkey"),
    )
    op.create_table(
        "characteristic_category",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="characteristic_category_pkey"),
        sa.UniqueConstraint("name", name="characteristic_category_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "effect",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("is_boost", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "characteristic_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("operator", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "elem",
            postgresql.ENUM(
                "ELEMENT_NEUTRAL",
                "ELEMENT_EARTH",
                "ELEMENT_FIRE",
                "ELEMENT_WATER",
                "ELEMENT_AIR",
                name="elemenum",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("use_in_fight", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["characteristic_id"],
            ["characteristic.id"],
            name="effect_characteristic_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="effect_pkey"),
    )
    # ### end Alembic commands ###
